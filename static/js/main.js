document.addEventListener("DOMContentLoaded", () => {
  const dropArea = document.getElementById("drop-area");
  const fileInput = document.getElementById("fileElem");
  const resultDiv = document.getElementById("result");
  const loader = document.getElementById("loader");

  dropArea.addEventListener("click", () => fileInput.click());
  fileInput.addEventListener("change", handleFiles);
  ["dragenter", "dragover"].forEach(eventName => {
    dropArea.addEventListener(eventName, highlight);
  });
  ["dragleave", "drop"].forEach(eventName => {
    dropArea.addEventListener(eventName, unhighlight);
  });
  dropArea.addEventListener("drop", handleDrop);

  function highlight(e) {
    e.preventDefault();
    dropArea.classList.add("highlight");
  }

  function unhighlight(e) {
    e.preventDefault();
    dropArea.classList.remove("highlight");
  }

  function handleDrop(e) {
    const dt = e.dataTransfer;
    const files = dt.files;
    handleFiles({target: {files}});
  }

  async function handleFiles(e) {
    const file = e.target.files[0];
    if (!file) return;
  
    resultDiv.innerHTML = ''; // Clear the previous results
  
    dropArea.style.display = 'none';
    loader.style.display = 'block';
  
    try {
      const formData = new FormData();
      formData.append("file", file);
      const response = await fetch("/upload", { method: "POST", body: formData });
      const data = await response.json();
  
      loader.style.display = 'none';
      dropArea.style.display = 'block';
  
      const resultContainer = document.createElement('div');
      resultContainer.classList.add('result-container');
  
      if (data.error) {
        resultContainer.textContent = `Error: ${data.error}`;
      } else {
        const resultBox = document.createElement('div');
        resultBox.classList.add('result-box');
        resultBox.classList.add(data.result === "benign" ? 'benign' : 'malicious');
        resultBox.innerText = data.result === "benign" ? 'The file is benign.' : 'The file is malicious.';
        resultContainer.appendChild(resultBox);
      }
  
      resultDiv.appendChild(resultContainer);
    } catch (error) {
      loader.style.display = 'none';
      dropArea.style.display = 'block';
  
      const errorContainer = document.createElement('div');
      errorContainer.classList.add('result-container');
      errorContainer.textContent = `Error: ${error.message}`;
      resultDiv.appendChild(errorContainer);
    }
  }
  
    
});
